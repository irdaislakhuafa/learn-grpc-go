// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/irdaislakhuafa/learn-grpc-go/src/schema/psqlentity/schema/generated/predicate"
	"github.com/irdaislakhuafa/learn-grpc-go/src/schema/psqlentity/schema/generated/useraddress"
)

// UserAddressUpdate is the builder for updating UserAddress entities.
type UserAddressUpdate struct {
	config
	hooks    []Hook
	mutation *UserAddressMutation
}

// Where appends a list predicates to the UserAddressUpdate builder.
func (uau *UserAddressUpdate) Where(ps ...predicate.UserAddress) *UserAddressUpdate {
	uau.mutation.Where(ps...)
	return uau
}

// SetUserID sets the "user_id" field.
func (uau *UserAddressUpdate) SetUserID(u uuid.UUID) *UserAddressUpdate {
	uau.mutation.SetUserID(u)
	return uau
}

// SetAddressID sets the "address_id" field.
func (uau *UserAddressUpdate) SetAddressID(u uuid.UUID) *UserAddressUpdate {
	uau.mutation.SetAddressID(u)
	return uau
}

// SetCreatedAt sets the "created_at" field.
func (uau *UserAddressUpdate) SetCreatedAt(t time.Time) *UserAddressUpdate {
	uau.mutation.SetCreatedAt(t)
	return uau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uau *UserAddressUpdate) SetNillableCreatedAt(t *time.Time) *UserAddressUpdate {
	if t != nil {
		uau.SetCreatedAt(*t)
	}
	return uau
}

// SetCreatedBy sets the "created_by" field.
func (uau *UserAddressUpdate) SetCreatedBy(u uuid.UUID) *UserAddressUpdate {
	uau.mutation.SetCreatedBy(u)
	return uau
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (uau *UserAddressUpdate) SetNillableCreatedBy(u *uuid.UUID) *UserAddressUpdate {
	if u != nil {
		uau.SetCreatedBy(*u)
	}
	return uau
}

// SetUpdatedAt sets the "updated_at" field.
func (uau *UserAddressUpdate) SetUpdatedAt(t time.Time) *UserAddressUpdate {
	uau.mutation.SetUpdatedAt(t)
	return uau
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uau *UserAddressUpdate) SetNillableUpdatedAt(t *time.Time) *UserAddressUpdate {
	if t != nil {
		uau.SetUpdatedAt(*t)
	}
	return uau
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uau *UserAddressUpdate) ClearUpdatedAt() *UserAddressUpdate {
	uau.mutation.ClearUpdatedAt()
	return uau
}

// SetUpdatedBy sets the "updated_by" field.
func (uau *UserAddressUpdate) SetUpdatedBy(u uuid.UUID) *UserAddressUpdate {
	uau.mutation.SetUpdatedBy(u)
	return uau
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uau *UserAddressUpdate) SetNillableUpdatedBy(u *uuid.UUID) *UserAddressUpdate {
	if u != nil {
		uau.SetUpdatedBy(*u)
	}
	return uau
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (uau *UserAddressUpdate) ClearUpdatedBy() *UserAddressUpdate {
	uau.mutation.ClearUpdatedBy()
	return uau
}

// SetDeletedAt sets the "deleted_at" field.
func (uau *UserAddressUpdate) SetDeletedAt(t time.Time) *UserAddressUpdate {
	uau.mutation.SetDeletedAt(t)
	return uau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uau *UserAddressUpdate) SetNillableDeletedAt(t *time.Time) *UserAddressUpdate {
	if t != nil {
		uau.SetDeletedAt(*t)
	}
	return uau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uau *UserAddressUpdate) ClearDeletedAt() *UserAddressUpdate {
	uau.mutation.ClearDeletedAt()
	return uau
}

// SetDeletedBy sets the "deleted_by" field.
func (uau *UserAddressUpdate) SetDeletedBy(u uuid.UUID) *UserAddressUpdate {
	uau.mutation.SetDeletedBy(u)
	return uau
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (uau *UserAddressUpdate) SetNillableDeletedBy(u *uuid.UUID) *UserAddressUpdate {
	if u != nil {
		uau.SetDeletedBy(*u)
	}
	return uau
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (uau *UserAddressUpdate) ClearDeletedBy() *UserAddressUpdate {
	uau.mutation.ClearDeletedBy()
	return uau
}

// SetIsDeleted sets the "is_deleted" field.
func (uau *UserAddressUpdate) SetIsDeleted(i int64) *UserAddressUpdate {
	uau.mutation.ResetIsDeleted()
	uau.mutation.SetIsDeleted(i)
	return uau
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (uau *UserAddressUpdate) SetNillableIsDeleted(i *int64) *UserAddressUpdate {
	if i != nil {
		uau.SetIsDeleted(*i)
	}
	return uau
}

// AddIsDeleted adds i to the "is_deleted" field.
func (uau *UserAddressUpdate) AddIsDeleted(i int64) *UserAddressUpdate {
	uau.mutation.AddIsDeleted(i)
	return uau
}

// Mutation returns the UserAddressMutation object of the builder.
func (uau *UserAddressUpdate) Mutation() *UserAddressMutation {
	return uau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uau *UserAddressUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uau.sqlSave, uau.mutation, uau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uau *UserAddressUpdate) SaveX(ctx context.Context) int {
	affected, err := uau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uau *UserAddressUpdate) Exec(ctx context.Context) error {
	_, err := uau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uau *UserAddressUpdate) ExecX(ctx context.Context) {
	if err := uau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uau *UserAddressUpdate) check() error {
	if v, ok := uau.mutation.IsDeleted(); ok {
		if err := useraddress.IsDeletedValidator(v); err != nil {
			return &ValidationError{Name: "is_deleted", err: fmt.Errorf(`generated: validator failed for field "UserAddress.is_deleted": %w`, err)}
		}
	}
	return nil
}

func (uau *UserAddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(useraddress.Table, useraddress.Columns, sqlgraph.NewFieldSpec(useraddress.FieldID, field.TypeUUID))
	if ps := uau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uau.mutation.UserID(); ok {
		_spec.SetField(useraddress.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := uau.mutation.AddressID(); ok {
		_spec.SetField(useraddress.FieldAddressID, field.TypeUUID, value)
	}
	if value, ok := uau.mutation.CreatedAt(); ok {
		_spec.SetField(useraddress.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uau.mutation.CreatedBy(); ok {
		_spec.SetField(useraddress.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := uau.mutation.UpdatedAt(); ok {
		_spec.SetField(useraddress.FieldUpdatedAt, field.TypeTime, value)
	}
	if uau.mutation.UpdatedAtCleared() {
		_spec.ClearField(useraddress.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uau.mutation.UpdatedBy(); ok {
		_spec.SetField(useraddress.FieldUpdatedBy, field.TypeUUID, value)
	}
	if uau.mutation.UpdatedByCleared() {
		_spec.ClearField(useraddress.FieldUpdatedBy, field.TypeUUID)
	}
	if value, ok := uau.mutation.DeletedAt(); ok {
		_spec.SetField(useraddress.FieldDeletedAt, field.TypeTime, value)
	}
	if uau.mutation.DeletedAtCleared() {
		_spec.ClearField(useraddress.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uau.mutation.DeletedBy(); ok {
		_spec.SetField(useraddress.FieldDeletedBy, field.TypeUUID, value)
	}
	if uau.mutation.DeletedByCleared() {
		_spec.ClearField(useraddress.FieldDeletedBy, field.TypeUUID)
	}
	if value, ok := uau.mutation.IsDeleted(); ok {
		_spec.SetField(useraddress.FieldIsDeleted, field.TypeInt64, value)
	}
	if value, ok := uau.mutation.AddedIsDeleted(); ok {
		_spec.AddField(useraddress.FieldIsDeleted, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useraddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uau.mutation.done = true
	return n, nil
}

// UserAddressUpdateOne is the builder for updating a single UserAddress entity.
type UserAddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserAddressMutation
}

// SetUserID sets the "user_id" field.
func (uauo *UserAddressUpdateOne) SetUserID(u uuid.UUID) *UserAddressUpdateOne {
	uauo.mutation.SetUserID(u)
	return uauo
}

// SetAddressID sets the "address_id" field.
func (uauo *UserAddressUpdateOne) SetAddressID(u uuid.UUID) *UserAddressUpdateOne {
	uauo.mutation.SetAddressID(u)
	return uauo
}

// SetCreatedAt sets the "created_at" field.
func (uauo *UserAddressUpdateOne) SetCreatedAt(t time.Time) *UserAddressUpdateOne {
	uauo.mutation.SetCreatedAt(t)
	return uauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uauo *UserAddressUpdateOne) SetNillableCreatedAt(t *time.Time) *UserAddressUpdateOne {
	if t != nil {
		uauo.SetCreatedAt(*t)
	}
	return uauo
}

// SetCreatedBy sets the "created_by" field.
func (uauo *UserAddressUpdateOne) SetCreatedBy(u uuid.UUID) *UserAddressUpdateOne {
	uauo.mutation.SetCreatedBy(u)
	return uauo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (uauo *UserAddressUpdateOne) SetNillableCreatedBy(u *uuid.UUID) *UserAddressUpdateOne {
	if u != nil {
		uauo.SetCreatedBy(*u)
	}
	return uauo
}

// SetUpdatedAt sets the "updated_at" field.
func (uauo *UserAddressUpdateOne) SetUpdatedAt(t time.Time) *UserAddressUpdateOne {
	uauo.mutation.SetUpdatedAt(t)
	return uauo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uauo *UserAddressUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserAddressUpdateOne {
	if t != nil {
		uauo.SetUpdatedAt(*t)
	}
	return uauo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uauo *UserAddressUpdateOne) ClearUpdatedAt() *UserAddressUpdateOne {
	uauo.mutation.ClearUpdatedAt()
	return uauo
}

// SetUpdatedBy sets the "updated_by" field.
func (uauo *UserAddressUpdateOne) SetUpdatedBy(u uuid.UUID) *UserAddressUpdateOne {
	uauo.mutation.SetUpdatedBy(u)
	return uauo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uauo *UserAddressUpdateOne) SetNillableUpdatedBy(u *uuid.UUID) *UserAddressUpdateOne {
	if u != nil {
		uauo.SetUpdatedBy(*u)
	}
	return uauo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (uauo *UserAddressUpdateOne) ClearUpdatedBy() *UserAddressUpdateOne {
	uauo.mutation.ClearUpdatedBy()
	return uauo
}

// SetDeletedAt sets the "deleted_at" field.
func (uauo *UserAddressUpdateOne) SetDeletedAt(t time.Time) *UserAddressUpdateOne {
	uauo.mutation.SetDeletedAt(t)
	return uauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uauo *UserAddressUpdateOne) SetNillableDeletedAt(t *time.Time) *UserAddressUpdateOne {
	if t != nil {
		uauo.SetDeletedAt(*t)
	}
	return uauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uauo *UserAddressUpdateOne) ClearDeletedAt() *UserAddressUpdateOne {
	uauo.mutation.ClearDeletedAt()
	return uauo
}

// SetDeletedBy sets the "deleted_by" field.
func (uauo *UserAddressUpdateOne) SetDeletedBy(u uuid.UUID) *UserAddressUpdateOne {
	uauo.mutation.SetDeletedBy(u)
	return uauo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (uauo *UserAddressUpdateOne) SetNillableDeletedBy(u *uuid.UUID) *UserAddressUpdateOne {
	if u != nil {
		uauo.SetDeletedBy(*u)
	}
	return uauo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (uauo *UserAddressUpdateOne) ClearDeletedBy() *UserAddressUpdateOne {
	uauo.mutation.ClearDeletedBy()
	return uauo
}

// SetIsDeleted sets the "is_deleted" field.
func (uauo *UserAddressUpdateOne) SetIsDeleted(i int64) *UserAddressUpdateOne {
	uauo.mutation.ResetIsDeleted()
	uauo.mutation.SetIsDeleted(i)
	return uauo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (uauo *UserAddressUpdateOne) SetNillableIsDeleted(i *int64) *UserAddressUpdateOne {
	if i != nil {
		uauo.SetIsDeleted(*i)
	}
	return uauo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (uauo *UserAddressUpdateOne) AddIsDeleted(i int64) *UserAddressUpdateOne {
	uauo.mutation.AddIsDeleted(i)
	return uauo
}

// Mutation returns the UserAddressMutation object of the builder.
func (uauo *UserAddressUpdateOne) Mutation() *UserAddressMutation {
	return uauo.mutation
}

// Where appends a list predicates to the UserAddressUpdate builder.
func (uauo *UserAddressUpdateOne) Where(ps ...predicate.UserAddress) *UserAddressUpdateOne {
	uauo.mutation.Where(ps...)
	return uauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uauo *UserAddressUpdateOne) Select(field string, fields ...string) *UserAddressUpdateOne {
	uauo.fields = append([]string{field}, fields...)
	return uauo
}

// Save executes the query and returns the updated UserAddress entity.
func (uauo *UserAddressUpdateOne) Save(ctx context.Context) (*UserAddress, error) {
	return withHooks(ctx, uauo.sqlSave, uauo.mutation, uauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uauo *UserAddressUpdateOne) SaveX(ctx context.Context) *UserAddress {
	node, err := uauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uauo *UserAddressUpdateOne) Exec(ctx context.Context) error {
	_, err := uauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uauo *UserAddressUpdateOne) ExecX(ctx context.Context) {
	if err := uauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uauo *UserAddressUpdateOne) check() error {
	if v, ok := uauo.mutation.IsDeleted(); ok {
		if err := useraddress.IsDeletedValidator(v); err != nil {
			return &ValidationError{Name: "is_deleted", err: fmt.Errorf(`generated: validator failed for field "UserAddress.is_deleted": %w`, err)}
		}
	}
	return nil
}

func (uauo *UserAddressUpdateOne) sqlSave(ctx context.Context) (_node *UserAddress, err error) {
	if err := uauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(useraddress.Table, useraddress.Columns, sqlgraph.NewFieldSpec(useraddress.FieldID, field.TypeUUID))
	id, ok := uauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "UserAddress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, useraddress.FieldID)
		for _, f := range fields {
			if !useraddress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != useraddress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uauo.mutation.UserID(); ok {
		_spec.SetField(useraddress.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := uauo.mutation.AddressID(); ok {
		_spec.SetField(useraddress.FieldAddressID, field.TypeUUID, value)
	}
	if value, ok := uauo.mutation.CreatedAt(); ok {
		_spec.SetField(useraddress.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uauo.mutation.CreatedBy(); ok {
		_spec.SetField(useraddress.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := uauo.mutation.UpdatedAt(); ok {
		_spec.SetField(useraddress.FieldUpdatedAt, field.TypeTime, value)
	}
	if uauo.mutation.UpdatedAtCleared() {
		_spec.ClearField(useraddress.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uauo.mutation.UpdatedBy(); ok {
		_spec.SetField(useraddress.FieldUpdatedBy, field.TypeUUID, value)
	}
	if uauo.mutation.UpdatedByCleared() {
		_spec.ClearField(useraddress.FieldUpdatedBy, field.TypeUUID)
	}
	if value, ok := uauo.mutation.DeletedAt(); ok {
		_spec.SetField(useraddress.FieldDeletedAt, field.TypeTime, value)
	}
	if uauo.mutation.DeletedAtCleared() {
		_spec.ClearField(useraddress.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uauo.mutation.DeletedBy(); ok {
		_spec.SetField(useraddress.FieldDeletedBy, field.TypeUUID, value)
	}
	if uauo.mutation.DeletedByCleared() {
		_spec.ClearField(useraddress.FieldDeletedBy, field.TypeUUID)
	}
	if value, ok := uauo.mutation.IsDeleted(); ok {
		_spec.SetField(useraddress.FieldIsDeleted, field.TypeInt64, value)
	}
	if value, ok := uauo.mutation.AddedIsDeleted(); ok {
		_spec.AddField(useraddress.FieldIsDeleted, field.TypeInt64, value)
	}
	_node = &UserAddress{config: uauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useraddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uauo.mutation.done = true
	return _node, nil
}
