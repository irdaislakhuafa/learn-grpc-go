// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/irdaislakhuafa/learn-grpc-go/src/schema/psqlentity/schema/generated/useraddress"
)

// UserAddressCreate is the builder for creating a UserAddress entity.
type UserAddressCreate struct {
	config
	mutation *UserAddressMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (uac *UserAddressCreate) SetUserID(u uuid.UUID) *UserAddressCreate {
	uac.mutation.SetUserID(u)
	return uac
}

// SetAddressID sets the "address_id" field.
func (uac *UserAddressCreate) SetAddressID(u uuid.UUID) *UserAddressCreate {
	uac.mutation.SetAddressID(u)
	return uac
}

// SetCreatedAt sets the "created_at" field.
func (uac *UserAddressCreate) SetCreatedAt(t time.Time) *UserAddressCreate {
	uac.mutation.SetCreatedAt(t)
	return uac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uac *UserAddressCreate) SetNillableCreatedAt(t *time.Time) *UserAddressCreate {
	if t != nil {
		uac.SetCreatedAt(*t)
	}
	return uac
}

// SetCreatedBy sets the "created_by" field.
func (uac *UserAddressCreate) SetCreatedBy(u uuid.UUID) *UserAddressCreate {
	uac.mutation.SetCreatedBy(u)
	return uac
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (uac *UserAddressCreate) SetNillableCreatedBy(u *uuid.UUID) *UserAddressCreate {
	if u != nil {
		uac.SetCreatedBy(*u)
	}
	return uac
}

// SetUpdatedAt sets the "updated_at" field.
func (uac *UserAddressCreate) SetUpdatedAt(t time.Time) *UserAddressCreate {
	uac.mutation.SetUpdatedAt(t)
	return uac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uac *UserAddressCreate) SetNillableUpdatedAt(t *time.Time) *UserAddressCreate {
	if t != nil {
		uac.SetUpdatedAt(*t)
	}
	return uac
}

// SetUpdatedBy sets the "updated_by" field.
func (uac *UserAddressCreate) SetUpdatedBy(u uuid.UUID) *UserAddressCreate {
	uac.mutation.SetUpdatedBy(u)
	return uac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uac *UserAddressCreate) SetNillableUpdatedBy(u *uuid.UUID) *UserAddressCreate {
	if u != nil {
		uac.SetUpdatedBy(*u)
	}
	return uac
}

// SetDeletedAt sets the "deleted_at" field.
func (uac *UserAddressCreate) SetDeletedAt(t time.Time) *UserAddressCreate {
	uac.mutation.SetDeletedAt(t)
	return uac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uac *UserAddressCreate) SetNillableDeletedAt(t *time.Time) *UserAddressCreate {
	if t != nil {
		uac.SetDeletedAt(*t)
	}
	return uac
}

// SetDeletedBy sets the "deleted_by" field.
func (uac *UserAddressCreate) SetDeletedBy(u uuid.UUID) *UserAddressCreate {
	uac.mutation.SetDeletedBy(u)
	return uac
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (uac *UserAddressCreate) SetNillableDeletedBy(u *uuid.UUID) *UserAddressCreate {
	if u != nil {
		uac.SetDeletedBy(*u)
	}
	return uac
}

// SetIsDeleted sets the "is_deleted" field.
func (uac *UserAddressCreate) SetIsDeleted(i int) *UserAddressCreate {
	uac.mutation.SetIsDeleted(i)
	return uac
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (uac *UserAddressCreate) SetNillableIsDeleted(i *int) *UserAddressCreate {
	if i != nil {
		uac.SetIsDeleted(*i)
	}
	return uac
}

// SetID sets the "id" field.
func (uac *UserAddressCreate) SetID(u uuid.UUID) *UserAddressCreate {
	uac.mutation.SetID(u)
	return uac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uac *UserAddressCreate) SetNillableID(u *uuid.UUID) *UserAddressCreate {
	if u != nil {
		uac.SetID(*u)
	}
	return uac
}

// Mutation returns the UserAddressMutation object of the builder.
func (uac *UserAddressCreate) Mutation() *UserAddressMutation {
	return uac.mutation
}

// Save creates the UserAddress in the database.
func (uac *UserAddressCreate) Save(ctx context.Context) (*UserAddress, error) {
	uac.defaults()
	return withHooks(ctx, uac.sqlSave, uac.mutation, uac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uac *UserAddressCreate) SaveX(ctx context.Context) *UserAddress {
	v, err := uac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uac *UserAddressCreate) Exec(ctx context.Context) error {
	_, err := uac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uac *UserAddressCreate) ExecX(ctx context.Context) {
	if err := uac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uac *UserAddressCreate) defaults() {
	if _, ok := uac.mutation.CreatedAt(); !ok {
		v := useraddress.DefaultCreatedAt()
		uac.mutation.SetCreatedAt(v)
	}
	if _, ok := uac.mutation.CreatedBy(); !ok {
		v := useraddress.DefaultCreatedBy()
		uac.mutation.SetCreatedBy(v)
	}
	if _, ok := uac.mutation.UpdatedAt(); !ok {
		v := useraddress.DefaultUpdatedAt()
		uac.mutation.SetUpdatedAt(v)
	}
	if _, ok := uac.mutation.UpdatedBy(); !ok {
		v := useraddress.DefaultUpdatedBy()
		uac.mutation.SetUpdatedBy(v)
	}
	if _, ok := uac.mutation.DeletedAt(); !ok {
		v := useraddress.DefaultDeletedAt()
		uac.mutation.SetDeletedAt(v)
	}
	if _, ok := uac.mutation.DeletedBy(); !ok {
		v := useraddress.DefaultDeletedBy()
		uac.mutation.SetDeletedBy(v)
	}
	if _, ok := uac.mutation.IsDeleted(); !ok {
		v := useraddress.DefaultIsDeleted
		uac.mutation.SetIsDeleted(v)
	}
	if _, ok := uac.mutation.ID(); !ok {
		v := useraddress.DefaultID()
		uac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uac *UserAddressCreate) check() error {
	if _, ok := uac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`generated: missing required field "UserAddress.user_id"`)}
	}
	if _, ok := uac.mutation.AddressID(); !ok {
		return &ValidationError{Name: "address_id", err: errors.New(`generated: missing required field "UserAddress.address_id"`)}
	}
	if _, ok := uac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "UserAddress.created_at"`)}
	}
	if _, ok := uac.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`generated: missing required field "UserAddress.created_by"`)}
	}
	if _, ok := uac.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`generated: missing required field "UserAddress.is_deleted"`)}
	}
	if v, ok := uac.mutation.IsDeleted(); ok {
		if err := useraddress.IsDeletedValidator(v); err != nil {
			return &ValidationError{Name: "is_deleted", err: fmt.Errorf(`generated: validator failed for field "UserAddress.is_deleted": %w`, err)}
		}
	}
	return nil
}

func (uac *UserAddressCreate) sqlSave(ctx context.Context) (*UserAddress, error) {
	if err := uac.check(); err != nil {
		return nil, err
	}
	_node, _spec := uac.createSpec()
	if err := sqlgraph.CreateNode(ctx, uac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	uac.mutation.id = &_node.ID
	uac.mutation.done = true
	return _node, nil
}

func (uac *UserAddressCreate) createSpec() (*UserAddress, *sqlgraph.CreateSpec) {
	var (
		_node = &UserAddress{config: uac.config}
		_spec = sqlgraph.NewCreateSpec(useraddress.Table, sqlgraph.NewFieldSpec(useraddress.FieldID, field.TypeUUID))
	)
	if id, ok := uac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uac.mutation.UserID(); ok {
		_spec.SetField(useraddress.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := uac.mutation.AddressID(); ok {
		_spec.SetField(useraddress.FieldAddressID, field.TypeUUID, value)
		_node.AddressID = value
	}
	if value, ok := uac.mutation.CreatedAt(); ok {
		_spec.SetField(useraddress.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uac.mutation.CreatedBy(); ok {
		_spec.SetField(useraddress.FieldCreatedBy, field.TypeUUID, value)
		_node.CreatedBy = value
	}
	if value, ok := uac.mutation.UpdatedAt(); ok {
		_spec.SetField(useraddress.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uac.mutation.UpdatedBy(); ok {
		_spec.SetField(useraddress.FieldUpdatedBy, field.TypeUUID, value)
		_node.UpdatedBy = value
	}
	if value, ok := uac.mutation.DeletedAt(); ok {
		_spec.SetField(useraddress.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := uac.mutation.DeletedBy(); ok {
		_spec.SetField(useraddress.FieldDeletedBy, field.TypeUUID, value)
		_node.DeletedBy = value
	}
	if value, ok := uac.mutation.IsDeleted(); ok {
		_spec.SetField(useraddress.FieldIsDeleted, field.TypeInt, value)
		_node.IsDeleted = value
	}
	return _node, _spec
}

// UserAddressCreateBulk is the builder for creating many UserAddress entities in bulk.
type UserAddressCreateBulk struct {
	config
	err      error
	builders []*UserAddressCreate
}

// Save creates the UserAddress entities in the database.
func (uacb *UserAddressCreateBulk) Save(ctx context.Context) ([]*UserAddress, error) {
	if uacb.err != nil {
		return nil, uacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uacb.builders))
	nodes := make([]*UserAddress, len(uacb.builders))
	mutators := make([]Mutator, len(uacb.builders))
	for i := range uacb.builders {
		func(i int, root context.Context) {
			builder := uacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserAddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uacb *UserAddressCreateBulk) SaveX(ctx context.Context) []*UserAddress {
	v, err := uacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uacb *UserAddressCreateBulk) Exec(ctx context.Context) error {
	_, err := uacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uacb *UserAddressCreateBulk) ExecX(ctx context.Context) {
	if err := uacb.Exec(ctx); err != nil {
		panic(err)
	}
}
