// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/irdaislakhuafa/learn-grpc-go/src/schema/psqlentity/schema/generated/predicate"
	"github.com/irdaislakhuafa/learn-grpc-go/src/schema/psqlentity/schema/generated/sale"
)

// SaleUpdate is the builder for updating Sale entities.
type SaleUpdate struct {
	config
	hooks    []Hook
	mutation *SaleMutation
}

// Where appends a list predicates to the SaleUpdate builder.
func (su *SaleUpdate) Where(ps ...predicate.Sale) *SaleUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetProductID sets the "product_id" field.
func (su *SaleUpdate) SetProductID(u uuid.UUID) *SaleUpdate {
	su.mutation.SetProductID(u)
	return su
}

// SetQuantity sets the "quantity" field.
func (su *SaleUpdate) SetQuantity(i int64) *SaleUpdate {
	su.mutation.ResetQuantity()
	su.mutation.SetQuantity(i)
	return su
}

// AddQuantity adds i to the "quantity" field.
func (su *SaleUpdate) AddQuantity(i int64) *SaleUpdate {
	su.mutation.AddQuantity(i)
	return su
}

// SetTotalAmount sets the "total_amount" field.
func (su *SaleUpdate) SetTotalAmount(i int64) *SaleUpdate {
	su.mutation.ResetTotalAmount()
	su.mutation.SetTotalAmount(i)
	return su
}

// AddTotalAmount adds i to the "total_amount" field.
func (su *SaleUpdate) AddTotalAmount(i int64) *SaleUpdate {
	su.mutation.AddTotalAmount(i)
	return su
}

// SetDate sets the "date" field.
func (su *SaleUpdate) SetDate(t time.Time) *SaleUpdate {
	su.mutation.SetDate(t)
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *SaleUpdate) SetCreatedAt(t time.Time) *SaleUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *SaleUpdate) SetNillableCreatedAt(t *time.Time) *SaleUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetCreatedBy sets the "created_by" field.
func (su *SaleUpdate) SetCreatedBy(u uuid.UUID) *SaleUpdate {
	su.mutation.SetCreatedBy(u)
	return su
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (su *SaleUpdate) SetNillableCreatedBy(u *uuid.UUID) *SaleUpdate {
	if u != nil {
		su.SetCreatedBy(*u)
	}
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SaleUpdate) SetUpdatedAt(t time.Time) *SaleUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (su *SaleUpdate) SetNillableUpdatedAt(t *time.Time) *SaleUpdate {
	if t != nil {
		su.SetUpdatedAt(*t)
	}
	return su
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (su *SaleUpdate) ClearUpdatedAt() *SaleUpdate {
	su.mutation.ClearUpdatedAt()
	return su
}

// SetUpdatedBy sets the "updated_by" field.
func (su *SaleUpdate) SetUpdatedBy(u uuid.UUID) *SaleUpdate {
	su.mutation.SetUpdatedBy(u)
	return su
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (su *SaleUpdate) SetNillableUpdatedBy(u *uuid.UUID) *SaleUpdate {
	if u != nil {
		su.SetUpdatedBy(*u)
	}
	return su
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (su *SaleUpdate) ClearUpdatedBy() *SaleUpdate {
	su.mutation.ClearUpdatedBy()
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *SaleUpdate) SetDeletedAt(t time.Time) *SaleUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *SaleUpdate) SetNillableDeletedAt(t *time.Time) *SaleUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *SaleUpdate) ClearDeletedAt() *SaleUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetDeletedBy sets the "deleted_by" field.
func (su *SaleUpdate) SetDeletedBy(u uuid.UUID) *SaleUpdate {
	su.mutation.SetDeletedBy(u)
	return su
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (su *SaleUpdate) SetNillableDeletedBy(u *uuid.UUID) *SaleUpdate {
	if u != nil {
		su.SetDeletedBy(*u)
	}
	return su
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (su *SaleUpdate) ClearDeletedBy() *SaleUpdate {
	su.mutation.ClearDeletedBy()
	return su
}

// SetIsDeleted sets the "is_deleted" field.
func (su *SaleUpdate) SetIsDeleted(i int64) *SaleUpdate {
	su.mutation.ResetIsDeleted()
	su.mutation.SetIsDeleted(i)
	return su
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (su *SaleUpdate) SetNillableIsDeleted(i *int64) *SaleUpdate {
	if i != nil {
		su.SetIsDeleted(*i)
	}
	return su
}

// AddIsDeleted adds i to the "is_deleted" field.
func (su *SaleUpdate) AddIsDeleted(i int64) *SaleUpdate {
	su.mutation.AddIsDeleted(i)
	return su
}

// Mutation returns the SaleMutation object of the builder.
func (su *SaleUpdate) Mutation() *SaleMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SaleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SaleUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SaleUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SaleUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SaleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sale.Table, sale.Columns, sqlgraph.NewFieldSpec(sale.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.ProductID(); ok {
		_spec.SetField(sale.FieldProductID, field.TypeUUID, value)
	}
	if value, ok := su.mutation.Quantity(); ok {
		_spec.SetField(sale.FieldQuantity, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedQuantity(); ok {
		_spec.AddField(sale.FieldQuantity, field.TypeInt64, value)
	}
	if value, ok := su.mutation.TotalAmount(); ok {
		_spec.SetField(sale.FieldTotalAmount, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedTotalAmount(); ok {
		_spec.AddField(sale.FieldTotalAmount, field.TypeInt64, value)
	}
	if value, ok := su.mutation.Date(); ok {
		_spec.SetField(sale.FieldDate, field.TypeTime, value)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(sale.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.CreatedBy(); ok {
		_spec.SetField(sale.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(sale.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.UpdatedAtCleared() {
		_spec.ClearField(sale.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := su.mutation.UpdatedBy(); ok {
		_spec.SetField(sale.FieldUpdatedBy, field.TypeUUID, value)
	}
	if su.mutation.UpdatedByCleared() {
		_spec.ClearField(sale.FieldUpdatedBy, field.TypeUUID)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(sale.FieldDeletedAt, field.TypeTime, value)
	}
	if su.mutation.DeletedAtCleared() {
		_spec.ClearField(sale.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := su.mutation.DeletedBy(); ok {
		_spec.SetField(sale.FieldDeletedBy, field.TypeUUID, value)
	}
	if su.mutation.DeletedByCleared() {
		_spec.ClearField(sale.FieldDeletedBy, field.TypeUUID)
	}
	if value, ok := su.mutation.IsDeleted(); ok {
		_spec.SetField(sale.FieldIsDeleted, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedIsDeleted(); ok {
		_spec.AddField(sale.FieldIsDeleted, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sale.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SaleUpdateOne is the builder for updating a single Sale entity.
type SaleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SaleMutation
}

// SetProductID sets the "product_id" field.
func (suo *SaleUpdateOne) SetProductID(u uuid.UUID) *SaleUpdateOne {
	suo.mutation.SetProductID(u)
	return suo
}

// SetQuantity sets the "quantity" field.
func (suo *SaleUpdateOne) SetQuantity(i int64) *SaleUpdateOne {
	suo.mutation.ResetQuantity()
	suo.mutation.SetQuantity(i)
	return suo
}

// AddQuantity adds i to the "quantity" field.
func (suo *SaleUpdateOne) AddQuantity(i int64) *SaleUpdateOne {
	suo.mutation.AddQuantity(i)
	return suo
}

// SetTotalAmount sets the "total_amount" field.
func (suo *SaleUpdateOne) SetTotalAmount(i int64) *SaleUpdateOne {
	suo.mutation.ResetTotalAmount()
	suo.mutation.SetTotalAmount(i)
	return suo
}

// AddTotalAmount adds i to the "total_amount" field.
func (suo *SaleUpdateOne) AddTotalAmount(i int64) *SaleUpdateOne {
	suo.mutation.AddTotalAmount(i)
	return suo
}

// SetDate sets the "date" field.
func (suo *SaleUpdateOne) SetDate(t time.Time) *SaleUpdateOne {
	suo.mutation.SetDate(t)
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *SaleUpdateOne) SetCreatedAt(t time.Time) *SaleUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *SaleUpdateOne) SetNillableCreatedAt(t *time.Time) *SaleUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetCreatedBy sets the "created_by" field.
func (suo *SaleUpdateOne) SetCreatedBy(u uuid.UUID) *SaleUpdateOne {
	suo.mutation.SetCreatedBy(u)
	return suo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (suo *SaleUpdateOne) SetNillableCreatedBy(u *uuid.UUID) *SaleUpdateOne {
	if u != nil {
		suo.SetCreatedBy(*u)
	}
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SaleUpdateOne) SetUpdatedAt(t time.Time) *SaleUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (suo *SaleUpdateOne) SetNillableUpdatedAt(t *time.Time) *SaleUpdateOne {
	if t != nil {
		suo.SetUpdatedAt(*t)
	}
	return suo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (suo *SaleUpdateOne) ClearUpdatedAt() *SaleUpdateOne {
	suo.mutation.ClearUpdatedAt()
	return suo
}

// SetUpdatedBy sets the "updated_by" field.
func (suo *SaleUpdateOne) SetUpdatedBy(u uuid.UUID) *SaleUpdateOne {
	suo.mutation.SetUpdatedBy(u)
	return suo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (suo *SaleUpdateOne) SetNillableUpdatedBy(u *uuid.UUID) *SaleUpdateOne {
	if u != nil {
		suo.SetUpdatedBy(*u)
	}
	return suo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (suo *SaleUpdateOne) ClearUpdatedBy() *SaleUpdateOne {
	suo.mutation.ClearUpdatedBy()
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *SaleUpdateOne) SetDeletedAt(t time.Time) *SaleUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *SaleUpdateOne) SetNillableDeletedAt(t *time.Time) *SaleUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *SaleUpdateOne) ClearDeletedAt() *SaleUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetDeletedBy sets the "deleted_by" field.
func (suo *SaleUpdateOne) SetDeletedBy(u uuid.UUID) *SaleUpdateOne {
	suo.mutation.SetDeletedBy(u)
	return suo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (suo *SaleUpdateOne) SetNillableDeletedBy(u *uuid.UUID) *SaleUpdateOne {
	if u != nil {
		suo.SetDeletedBy(*u)
	}
	return suo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (suo *SaleUpdateOne) ClearDeletedBy() *SaleUpdateOne {
	suo.mutation.ClearDeletedBy()
	return suo
}

// SetIsDeleted sets the "is_deleted" field.
func (suo *SaleUpdateOne) SetIsDeleted(i int64) *SaleUpdateOne {
	suo.mutation.ResetIsDeleted()
	suo.mutation.SetIsDeleted(i)
	return suo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (suo *SaleUpdateOne) SetNillableIsDeleted(i *int64) *SaleUpdateOne {
	if i != nil {
		suo.SetIsDeleted(*i)
	}
	return suo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (suo *SaleUpdateOne) AddIsDeleted(i int64) *SaleUpdateOne {
	suo.mutation.AddIsDeleted(i)
	return suo
}

// Mutation returns the SaleMutation object of the builder.
func (suo *SaleUpdateOne) Mutation() *SaleMutation {
	return suo.mutation
}

// Where appends a list predicates to the SaleUpdate builder.
func (suo *SaleUpdateOne) Where(ps ...predicate.Sale) *SaleUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SaleUpdateOne) Select(field string, fields ...string) *SaleUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Sale entity.
func (suo *SaleUpdateOne) Save(ctx context.Context) (*Sale, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SaleUpdateOne) SaveX(ctx context.Context) *Sale {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SaleUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SaleUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SaleUpdateOne) sqlSave(ctx context.Context) (_node *Sale, err error) {
	_spec := sqlgraph.NewUpdateSpec(sale.Table, sale.Columns, sqlgraph.NewFieldSpec(sale.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Sale.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sale.FieldID)
		for _, f := range fields {
			if !sale.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != sale.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.ProductID(); ok {
		_spec.SetField(sale.FieldProductID, field.TypeUUID, value)
	}
	if value, ok := suo.mutation.Quantity(); ok {
		_spec.SetField(sale.FieldQuantity, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedQuantity(); ok {
		_spec.AddField(sale.FieldQuantity, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.TotalAmount(); ok {
		_spec.SetField(sale.FieldTotalAmount, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedTotalAmount(); ok {
		_spec.AddField(sale.FieldTotalAmount, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.Date(); ok {
		_spec.SetField(sale.FieldDate, field.TypeTime, value)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(sale.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.CreatedBy(); ok {
		_spec.SetField(sale.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(sale.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.UpdatedAtCleared() {
		_spec.ClearField(sale.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.UpdatedBy(); ok {
		_spec.SetField(sale.FieldUpdatedBy, field.TypeUUID, value)
	}
	if suo.mutation.UpdatedByCleared() {
		_spec.ClearField(sale.FieldUpdatedBy, field.TypeUUID)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(sale.FieldDeletedAt, field.TypeTime, value)
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.ClearField(sale.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.DeletedBy(); ok {
		_spec.SetField(sale.FieldDeletedBy, field.TypeUUID, value)
	}
	if suo.mutation.DeletedByCleared() {
		_spec.ClearField(sale.FieldDeletedBy, field.TypeUUID)
	}
	if value, ok := suo.mutation.IsDeleted(); ok {
		_spec.SetField(sale.FieldIsDeleted, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedIsDeleted(); ok {
		_spec.AddField(sale.FieldIsDeleted, field.TypeInt64, value)
	}
	_node = &Sale{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sale.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
