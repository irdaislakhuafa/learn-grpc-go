// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/irdaislakhuafa/learn-grpc-go/src/schema/psqlentity/schema/generated/sale"
)

// SaleCreate is the builder for creating a Sale entity.
type SaleCreate struct {
	config
	mutation *SaleMutation
	hooks    []Hook
}

// SetProductID sets the "product_id" field.
func (sc *SaleCreate) SetProductID(u uuid.UUID) *SaleCreate {
	sc.mutation.SetProductID(u)
	return sc
}

// SetQuantity sets the "quantity" field.
func (sc *SaleCreate) SetQuantity(i int64) *SaleCreate {
	sc.mutation.SetQuantity(i)
	return sc
}

// SetTotalAmount sets the "total_amount" field.
func (sc *SaleCreate) SetTotalAmount(i int64) *SaleCreate {
	sc.mutation.SetTotalAmount(i)
	return sc
}

// SetDate sets the "date" field.
func (sc *SaleCreate) SetDate(t time.Time) *SaleCreate {
	sc.mutation.SetDate(t)
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SaleCreate) SetCreatedAt(t time.Time) *SaleCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SaleCreate) SetNillableCreatedAt(t *time.Time) *SaleCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetCreatedBy sets the "created_by" field.
func (sc *SaleCreate) SetCreatedBy(u uuid.UUID) *SaleCreate {
	sc.mutation.SetCreatedBy(u)
	return sc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sc *SaleCreate) SetNillableCreatedBy(u *uuid.UUID) *SaleCreate {
	if u != nil {
		sc.SetCreatedBy(*u)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SaleCreate) SetUpdatedAt(t time.Time) *SaleCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SaleCreate) SetNillableUpdatedAt(t *time.Time) *SaleCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetUpdatedBy sets the "updated_by" field.
func (sc *SaleCreate) SetUpdatedBy(u uuid.UUID) *SaleCreate {
	sc.mutation.SetUpdatedBy(u)
	return sc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sc *SaleCreate) SetNillableUpdatedBy(u *uuid.UUID) *SaleCreate {
	if u != nil {
		sc.SetUpdatedBy(*u)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *SaleCreate) SetDeletedAt(t time.Time) *SaleCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *SaleCreate) SetNillableDeletedAt(t *time.Time) *SaleCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetDeletedBy sets the "deleted_by" field.
func (sc *SaleCreate) SetDeletedBy(u uuid.UUID) *SaleCreate {
	sc.mutation.SetDeletedBy(u)
	return sc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (sc *SaleCreate) SetNillableDeletedBy(u *uuid.UUID) *SaleCreate {
	if u != nil {
		sc.SetDeletedBy(*u)
	}
	return sc
}

// SetIsDeleted sets the "is_deleted" field.
func (sc *SaleCreate) SetIsDeleted(i int64) *SaleCreate {
	sc.mutation.SetIsDeleted(i)
	return sc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (sc *SaleCreate) SetNillableIsDeleted(i *int64) *SaleCreate {
	if i != nil {
		sc.SetIsDeleted(*i)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SaleCreate) SetID(u uuid.UUID) *SaleCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SaleCreate) SetNillableID(u *uuid.UUID) *SaleCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// Mutation returns the SaleMutation object of the builder.
func (sc *SaleCreate) Mutation() *SaleMutation {
	return sc.mutation
}

// Save creates the Sale in the database.
func (sc *SaleCreate) Save(ctx context.Context) (*Sale, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SaleCreate) SaveX(ctx context.Context) *Sale {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SaleCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SaleCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SaleCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := sale.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.CreatedBy(); !ok {
		v := sale.DefaultCreatedBy()
		sc.mutation.SetCreatedBy(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := sale.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedBy(); !ok {
		v := sale.DefaultUpdatedBy()
		sc.mutation.SetUpdatedBy(v)
	}
	if _, ok := sc.mutation.DeletedAt(); !ok {
		v := sale.DefaultDeletedAt()
		sc.mutation.SetDeletedAt(v)
	}
	if _, ok := sc.mutation.DeletedBy(); !ok {
		v := sale.DefaultDeletedBy()
		sc.mutation.SetDeletedBy(v)
	}
	if _, ok := sc.mutation.IsDeleted(); !ok {
		v := sale.DefaultIsDeleted
		sc.mutation.SetIsDeleted(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := sale.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SaleCreate) check() error {
	if _, ok := sc.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product_id", err: errors.New(`generated: missing required field "Sale.product_id"`)}
	}
	if _, ok := sc.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`generated: missing required field "Sale.quantity"`)}
	}
	if _, ok := sc.mutation.TotalAmount(); !ok {
		return &ValidationError{Name: "total_amount", err: errors.New(`generated: missing required field "Sale.total_amount"`)}
	}
	if _, ok := sc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`generated: missing required field "Sale.date"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Sale.created_at"`)}
	}
	if _, ok := sc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`generated: missing required field "Sale.created_by"`)}
	}
	if _, ok := sc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`generated: missing required field "Sale.is_deleted"`)}
	}
	return nil
}

func (sc *SaleCreate) sqlSave(ctx context.Context) (*Sale, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SaleCreate) createSpec() (*Sale, *sqlgraph.CreateSpec) {
	var (
		_node = &Sale{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(sale.Table, sqlgraph.NewFieldSpec(sale.FieldID, field.TypeUUID))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.ProductID(); ok {
		_spec.SetField(sale.FieldProductID, field.TypeUUID, value)
		_node.ProductID = value
	}
	if value, ok := sc.mutation.Quantity(); ok {
		_spec.SetField(sale.FieldQuantity, field.TypeInt64, value)
		_node.Quantity = value
	}
	if value, ok := sc.mutation.TotalAmount(); ok {
		_spec.SetField(sale.FieldTotalAmount, field.TypeInt64, value)
		_node.TotalAmount = value
	}
	if value, ok := sc.mutation.Date(); ok {
		_spec.SetField(sale.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(sale.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.CreatedBy(); ok {
		_spec.SetField(sale.FieldCreatedBy, field.TypeUUID, value)
		_node.CreatedBy = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(sale.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.UpdatedBy(); ok {
		_spec.SetField(sale.FieldUpdatedBy, field.TypeUUID, value)
		_node.UpdatedBy = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.SetField(sale.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := sc.mutation.DeletedBy(); ok {
		_spec.SetField(sale.FieldDeletedBy, field.TypeUUID, value)
		_node.DeletedBy = value
	}
	if value, ok := sc.mutation.IsDeleted(); ok {
		_spec.SetField(sale.FieldIsDeleted, field.TypeInt64, value)
		_node.IsDeleted = value
	}
	return _node, _spec
}

// SaleCreateBulk is the builder for creating many Sale entities in bulk.
type SaleCreateBulk struct {
	config
	err      error
	builders []*SaleCreate
}

// Save creates the Sale entities in the database.
func (scb *SaleCreateBulk) Save(ctx context.Context) ([]*Sale, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Sale, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SaleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SaleCreateBulk) SaveX(ctx context.Context) []*Sale {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SaleCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SaleCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
