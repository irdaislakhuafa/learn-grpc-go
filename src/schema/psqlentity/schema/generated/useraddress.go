// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/irdaislakhuafa/learn-grpc-go/src/schema/psqlentity/schema/generated/useraddress"
)

// UserAddress is the model entity for the UserAddress schema.
type UserAddress struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// AddressID holds the value of the "address_id" field.
	AddressID uuid.UUID `json:"address_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy uuid.UUID `json:"created_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy uuid.UUID `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy uuid.UUID `json:"deleted_by,omitempty"`
	// IsDeleted holds the value of the "is_deleted" field.
	IsDeleted    int64 `json:"is_deleted,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserAddress) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case useraddress.FieldIsDeleted:
			values[i] = new(sql.NullInt64)
		case useraddress.FieldCreatedAt, useraddress.FieldUpdatedAt, useraddress.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case useraddress.FieldID, useraddress.FieldUserID, useraddress.FieldAddressID, useraddress.FieldCreatedBy, useraddress.FieldUpdatedBy, useraddress.FieldDeletedBy:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserAddress fields.
func (ua *UserAddress) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case useraddress.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ua.ID = *value
			}
		case useraddress.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				ua.UserID = *value
			}
		case useraddress.FieldAddressID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field address_id", values[i])
			} else if value != nil {
				ua.AddressID = *value
			}
		case useraddress.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ua.CreatedAt = value.Time
			}
		case useraddress.FieldCreatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value != nil {
				ua.CreatedBy = *value
			}
		case useraddress.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ua.UpdatedAt = value.Time
			}
		case useraddress.FieldUpdatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value != nil {
				ua.UpdatedBy = *value
			}
		case useraddress.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ua.DeletedAt = value.Time
			}
		case useraddress.FieldDeletedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value != nil {
				ua.DeletedBy = *value
			}
		case useraddress.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				ua.IsDeleted = value.Int64
			}
		default:
			ua.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserAddress.
// This includes values selected through modifiers, order, etc.
func (ua *UserAddress) Value(name string) (ent.Value, error) {
	return ua.selectValues.Get(name)
}

// Update returns a builder for updating this UserAddress.
// Note that you need to call UserAddress.Unwrap() before calling this method if this UserAddress
// was returned from a transaction, and the transaction was committed or rolled back.
func (ua *UserAddress) Update() *UserAddressUpdateOne {
	return NewUserAddressClient(ua.config).UpdateOne(ua)
}

// Unwrap unwraps the UserAddress entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ua *UserAddress) Unwrap() *UserAddress {
	_tx, ok := ua.config.driver.(*txDriver)
	if !ok {
		panic("generated: UserAddress is not a transactional entity")
	}
	ua.config.driver = _tx.drv
	return ua
}

// String implements the fmt.Stringer.
func (ua *UserAddress) String() string {
	var builder strings.Builder
	builder.WriteString("UserAddress(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ua.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ua.UserID))
	builder.WriteString(", ")
	builder.WriteString("address_id=")
	builder.WriteString(fmt.Sprintf("%v", ua.AddressID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ua.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", ua.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ua.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", ua.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ua.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(fmt.Sprintf("%v", ua.DeletedBy))
	builder.WriteString(", ")
	builder.WriteString("is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", ua.IsDeleted))
	builder.WriteByte(')')
	return builder.String()
}

// UserAddresses is a parsable slice of UserAddress.
type UserAddresses []*UserAddress
