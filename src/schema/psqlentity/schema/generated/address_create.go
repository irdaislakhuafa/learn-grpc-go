// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/irdaislakhuafa/learn-grpc-go/src/schema/psqlentity/schema/generated/address"
)

// AddressCreate is the builder for creating a Address entity.
type AddressCreate struct {
	config
	mutation *AddressMutation
	hooks    []Hook
}

// SetCountry sets the "country" field.
func (ac *AddressCreate) SetCountry(s string) *AddressCreate {
	ac.mutation.SetCountry(s)
	return ac
}

// SetProvince sets the "province" field.
func (ac *AddressCreate) SetProvince(s string) *AddressCreate {
	ac.mutation.SetProvince(s)
	return ac
}

// SetRegency sets the "regency" field.
func (ac *AddressCreate) SetRegency(s string) *AddressCreate {
	ac.mutation.SetRegency(s)
	return ac
}

// SetSubDistrict sets the "sub_district" field.
func (ac *AddressCreate) SetSubDistrict(s string) *AddressCreate {
	ac.mutation.SetSubDistrict(s)
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AddressCreate) SetCreatedAt(t time.Time) *AddressCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AddressCreate) SetNillableCreatedAt(t *time.Time) *AddressCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetCreatedBy sets the "created_by" field.
func (ac *AddressCreate) SetCreatedBy(u uuid.UUID) *AddressCreate {
	ac.mutation.SetCreatedBy(u)
	return ac
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ac *AddressCreate) SetNillableCreatedBy(u *uuid.UUID) *AddressCreate {
	if u != nil {
		ac.SetCreatedBy(*u)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AddressCreate) SetUpdatedAt(t time.Time) *AddressCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AddressCreate) SetNillableUpdatedAt(t *time.Time) *AddressCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetUpdatedBy sets the "updated_by" field.
func (ac *AddressCreate) SetUpdatedBy(u uuid.UUID) *AddressCreate {
	ac.mutation.SetUpdatedBy(u)
	return ac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ac *AddressCreate) SetNillableUpdatedBy(u *uuid.UUID) *AddressCreate {
	if u != nil {
		ac.SetUpdatedBy(*u)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AddressCreate) SetDeletedAt(t time.Time) *AddressCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AddressCreate) SetNillableDeletedAt(t *time.Time) *AddressCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetDeletedBy sets the "deleted_by" field.
func (ac *AddressCreate) SetDeletedBy(u uuid.UUID) *AddressCreate {
	ac.mutation.SetDeletedBy(u)
	return ac
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ac *AddressCreate) SetNillableDeletedBy(u *uuid.UUID) *AddressCreate {
	if u != nil {
		ac.SetDeletedBy(*u)
	}
	return ac
}

// SetIsDeleted sets the "is_deleted" field.
func (ac *AddressCreate) SetIsDeleted(i int64) *AddressCreate {
	ac.mutation.SetIsDeleted(i)
	return ac
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (ac *AddressCreate) SetNillableIsDeleted(i *int64) *AddressCreate {
	if i != nil {
		ac.SetIsDeleted(*i)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AddressCreate) SetID(u uuid.UUID) *AddressCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AddressCreate) SetNillableID(u *uuid.UUID) *AddressCreate {
	if u != nil {
		ac.SetID(*u)
	}
	return ac
}

// Mutation returns the AddressMutation object of the builder.
func (ac *AddressCreate) Mutation() *AddressMutation {
	return ac.mutation
}

// Save creates the Address in the database.
func (ac *AddressCreate) Save(ctx context.Context) (*Address, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AddressCreate) SaveX(ctx context.Context) *Address {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AddressCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AddressCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AddressCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := address.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.CreatedBy(); !ok {
		v := address.DefaultCreatedBy()
		ac.mutation.SetCreatedBy(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := address.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedBy(); !ok {
		v := address.DefaultUpdatedBy()
		ac.mutation.SetUpdatedBy(v)
	}
	if _, ok := ac.mutation.DeletedAt(); !ok {
		v := address.DefaultDeletedAt()
		ac.mutation.SetDeletedAt(v)
	}
	if _, ok := ac.mutation.DeletedBy(); !ok {
		v := address.DefaultDeletedBy()
		ac.mutation.SetDeletedBy(v)
	}
	if _, ok := ac.mutation.IsDeleted(); !ok {
		v := address.DefaultIsDeleted
		ac.mutation.SetIsDeleted(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		v := address.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AddressCreate) check() error {
	if _, ok := ac.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`generated: missing required field "Address.country"`)}
	}
	if v, ok := ac.mutation.Country(); ok {
		if err := address.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`generated: validator failed for field "Address.country": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Province(); !ok {
		return &ValidationError{Name: "province", err: errors.New(`generated: missing required field "Address.province"`)}
	}
	if v, ok := ac.mutation.Province(); ok {
		if err := address.ProvinceValidator(v); err != nil {
			return &ValidationError{Name: "province", err: fmt.Errorf(`generated: validator failed for field "Address.province": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Regency(); !ok {
		return &ValidationError{Name: "regency", err: errors.New(`generated: missing required field "Address.regency"`)}
	}
	if v, ok := ac.mutation.Regency(); ok {
		if err := address.RegencyValidator(v); err != nil {
			return &ValidationError{Name: "regency", err: fmt.Errorf(`generated: validator failed for field "Address.regency": %w`, err)}
		}
	}
	if _, ok := ac.mutation.SubDistrict(); !ok {
		return &ValidationError{Name: "sub_district", err: errors.New(`generated: missing required field "Address.sub_district"`)}
	}
	if v, ok := ac.mutation.SubDistrict(); ok {
		if err := address.SubDistrictValidator(v); err != nil {
			return &ValidationError{Name: "sub_district", err: fmt.Errorf(`generated: validator failed for field "Address.sub_district": %w`, err)}
		}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Address.created_at"`)}
	}
	if _, ok := ac.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`generated: missing required field "Address.created_by"`)}
	}
	if _, ok := ac.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`generated: missing required field "Address.is_deleted"`)}
	}
	if v, ok := ac.mutation.IsDeleted(); ok {
		if err := address.IsDeletedValidator(v); err != nil {
			return &ValidationError{Name: "is_deleted", err: fmt.Errorf(`generated: validator failed for field "Address.is_deleted": %w`, err)}
		}
	}
	return nil
}

func (ac *AddressCreate) sqlSave(ctx context.Context) (*Address, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AddressCreate) createSpec() (*Address, *sqlgraph.CreateSpec) {
	var (
		_node = &Address{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(address.Table, sqlgraph.NewFieldSpec(address.FieldID, field.TypeUUID))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ac.mutation.Country(); ok {
		_spec.SetField(address.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := ac.mutation.Province(); ok {
		_spec.SetField(address.FieldProvince, field.TypeString, value)
		_node.Province = value
	}
	if value, ok := ac.mutation.Regency(); ok {
		_spec.SetField(address.FieldRegency, field.TypeString, value)
		_node.Regency = value
	}
	if value, ok := ac.mutation.SubDistrict(); ok {
		_spec.SetField(address.FieldSubDistrict, field.TypeString, value)
		_node.SubDistrict = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(address.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.CreatedBy(); ok {
		_spec.SetField(address.FieldCreatedBy, field.TypeUUID, value)
		_node.CreatedBy = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(address.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.UpdatedBy(); ok {
		_spec.SetField(address.FieldUpdatedBy, field.TypeUUID, value)
		_node.UpdatedBy = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.SetField(address.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ac.mutation.DeletedBy(); ok {
		_spec.SetField(address.FieldDeletedBy, field.TypeUUID, value)
		_node.DeletedBy = value
	}
	if value, ok := ac.mutation.IsDeleted(); ok {
		_spec.SetField(address.FieldIsDeleted, field.TypeInt64, value)
		_node.IsDeleted = value
	}
	return _node, _spec
}

// AddressCreateBulk is the builder for creating many Address entities in bulk.
type AddressCreateBulk struct {
	config
	err      error
	builders []*AddressCreate
}

// Save creates the Address entities in the database.
func (acb *AddressCreateBulk) Save(ctx context.Context) ([]*Address, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Address, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AddressCreateBulk) SaveX(ctx context.Context) []*Address {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AddressCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AddressCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
