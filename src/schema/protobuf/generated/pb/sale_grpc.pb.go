// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: sale.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SaleService_GetSales_FullMethodName   = "/protobuf.SaleService/GetSales"
	SaleService_GetSale_FullMethodName    = "/protobuf.SaleService/GetSale"
	SaleService_CreateSale_FullMethodName = "/protobuf.SaleService/CreateSale"
	SaleService_UpdateSale_FullMethodName = "/protobuf.SaleService/UpdateSale"
	SaleService_DeleteSale_FullMethodName = "/protobuf.SaleService/DeleteSale"
)

// SaleServiceClient is the client API for SaleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SaleServiceClient interface {
	GetSales(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*SaleResponsePagination, error)
	GetSale(ctx context.Context, in *GetSaleRequest, opts ...grpc.CallOption) (*Sale, error)
	CreateSale(ctx context.Context, in *CreateSaleRequest, opts ...grpc.CallOption) (*Sale, error)
	UpdateSale(ctx context.Context, in *UpdateSaleRequest, opts ...grpc.CallOption) (*Sale, error)
	DeleteSale(ctx context.Context, in *DeleteSaleRequest, opts ...grpc.CallOption) (*Sale, error)
}

type saleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSaleServiceClient(cc grpc.ClientConnInterface) SaleServiceClient {
	return &saleServiceClient{cc}
}

func (c *saleServiceClient) GetSales(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*SaleResponsePagination, error) {
	out := new(SaleResponsePagination)
	err := c.cc.Invoke(ctx, SaleService_GetSales_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleServiceClient) GetSale(ctx context.Context, in *GetSaleRequest, opts ...grpc.CallOption) (*Sale, error) {
	out := new(Sale)
	err := c.cc.Invoke(ctx, SaleService_GetSale_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleServiceClient) CreateSale(ctx context.Context, in *CreateSaleRequest, opts ...grpc.CallOption) (*Sale, error) {
	out := new(Sale)
	err := c.cc.Invoke(ctx, SaleService_CreateSale_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleServiceClient) UpdateSale(ctx context.Context, in *UpdateSaleRequest, opts ...grpc.CallOption) (*Sale, error) {
	out := new(Sale)
	err := c.cc.Invoke(ctx, SaleService_UpdateSale_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleServiceClient) DeleteSale(ctx context.Context, in *DeleteSaleRequest, opts ...grpc.CallOption) (*Sale, error) {
	out := new(Sale)
	err := c.cc.Invoke(ctx, SaleService_DeleteSale_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SaleServiceServer is the server API for SaleService service.
// All implementations must embed UnimplementedSaleServiceServer
// for forward compatibility
type SaleServiceServer interface {
	GetSales(context.Context, *PaginationRequest) (*SaleResponsePagination, error)
	GetSale(context.Context, *GetSaleRequest) (*Sale, error)
	CreateSale(context.Context, *CreateSaleRequest) (*Sale, error)
	UpdateSale(context.Context, *UpdateSaleRequest) (*Sale, error)
	DeleteSale(context.Context, *DeleteSaleRequest) (*Sale, error)
	mustEmbedUnimplementedSaleServiceServer()
}

// UnimplementedSaleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSaleServiceServer struct {
}

func (UnimplementedSaleServiceServer) GetSales(context.Context, *PaginationRequest) (*SaleResponsePagination, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSales not implemented")
}
func (UnimplementedSaleServiceServer) GetSale(context.Context, *GetSaleRequest) (*Sale, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSale not implemented")
}
func (UnimplementedSaleServiceServer) CreateSale(context.Context, *CreateSaleRequest) (*Sale, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSale not implemented")
}
func (UnimplementedSaleServiceServer) UpdateSale(context.Context, *UpdateSaleRequest) (*Sale, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSale not implemented")
}
func (UnimplementedSaleServiceServer) DeleteSale(context.Context, *DeleteSaleRequest) (*Sale, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSale not implemented")
}
func (UnimplementedSaleServiceServer) mustEmbedUnimplementedSaleServiceServer() {}

// UnsafeSaleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SaleServiceServer will
// result in compilation errors.
type UnsafeSaleServiceServer interface {
	mustEmbedUnimplementedSaleServiceServer()
}

func RegisterSaleServiceServer(s grpc.ServiceRegistrar, srv SaleServiceServer) {
	s.RegisterService(&SaleService_ServiceDesc, srv)
}

func _SaleService_GetSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).GetSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SaleService_GetSales_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).GetSales(ctx, req.(*PaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleService_GetSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).GetSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SaleService_GetSale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).GetSale(ctx, req.(*GetSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleService_CreateSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).CreateSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SaleService_CreateSale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).CreateSale(ctx, req.(*CreateSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleService_UpdateSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).UpdateSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SaleService_UpdateSale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).UpdateSale(ctx, req.(*UpdateSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleService_DeleteSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).DeleteSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SaleService_DeleteSale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).DeleteSale(ctx, req.(*DeleteSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SaleService_ServiceDesc is the grpc.ServiceDesc for SaleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SaleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.SaleService",
	HandlerType: (*SaleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSales",
			Handler:    _SaleService_GetSales_Handler,
		},
		{
			MethodName: "GetSale",
			Handler:    _SaleService_GetSale_Handler,
		},
		{
			MethodName: "CreateSale",
			Handler:    _SaleService_CreateSale_Handler,
		},
		{
			MethodName: "UpdateSale",
			Handler:    _SaleService_UpdateSale_Handler,
		},
		{
			MethodName: "DeleteSale",
			Handler:    _SaleService_DeleteSale_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sale.proto",
}
